name: Release Executables

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    outputs:
      version_changed: ${{ steps.versioncheck.outputs.changed }}

    steps:
      - uses: actions/checkout@v4

      - name: Get previous package.json
        id: prevpkg
        run: |
          git fetch origin main --depth=2
          git show HEAD^:package.json > old-package.json || echo '{}' > old-package.json

      - name: Check if version changed
        id: versioncheck
        run: |
          oldver=$(jq -r .version old-package.json)
          newver=$(jq -r .version package.json)
          echo "Old version: $oldver, New version: $newver"
          if [ "$oldver" = "$newver" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Set up Node.js
        if: steps.versioncheck.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Linux dependencies
        if: steps.versioncheck.outputs.changed == 'true' && runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxss-dev libinput-dev libudev-dev

      - name: Add user to input group
        if: steps.versioncheck.outputs.changed == 'true' && runner.os == 'Linux'
        run: sudo usermod -a -G input $USER

      - name: Install dependencies
        if: steps.versioncheck.outputs.changed == 'true'
        run: npm install

      - name: Build executables
        if: steps.versioncheck.outputs.changed == 'true'
        run: npm run build

      - name: Package app
        if: steps.versioncheck.outputs.changed == 'true'
        run: |
          npx electron-builder --${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'mac' || 'win' }}

      - name: Rename executable for release
        if: steps.versioncheck.outputs.changed == 'true'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mv dist/*.AppImage dist/self-track-linux.AppImage || true
            mv dist/*.deb dist/self-track-linux.deb || true
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv dist/*.dmg dist/self-track-mac.dmg || true
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv dist/*.exe dist/self-track-win.exe || true
          fi

      - name: Upload executable artifact
        if: steps.versioncheck.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: self-track-${{ matrix.os }}
          path: |
            dist/self-track-*

  collect-artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all executables
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets
          merge-multiple: true
      - name: Check for executables to upload
        id: check_upload
        run: |
          mkdir -p ./release-assets
          count=$(find ./release-assets -maxdepth 1 -name 'self-track-*' | wc -l)
          echo "Found $count executables to upload"
          if [ "$count" -eq 0 ]; then
            echo "found=false" >> $GITHUB_OUTPUT
          else
            echo "found=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Upload all executables for release
        if: steps.check_upload.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: all-executables
          path: ./release-assets/self-track-*

  release:
    needs: collect-artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all executables
        id: download_exec
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: all-executables
          path: ./release-assets

      - name: Check for executables
        id: check_exec
        run: |
          mkdir -p ./release-assets
          count=$(find ./release-assets -maxdepth 1 -name 'self-track-*' | wc -l)
          echo "Found $count executables"
          if [ "$count" -eq 0 ]; then
            echo "found=false" >> $GITHUB_OUTPUT
          else
            echo "found=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Zip source code
        if: steps.check_exec.outputs.found == 'true'
        run: |
          git archive --format zip --output self-track-source.zip HEAD

      - name: Create GitHub Release
        if: steps.check_exec.outputs.found == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}-${{ github.sha }}
          name: Release v${{ github.run_number }}
          body: |
            Automated release for version bump in package.json.
          files: |
            release-assets/self-track-*
            self-track-source.zip
